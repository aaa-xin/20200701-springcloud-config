spring.profiles=dev
spring.application.name=config-server-dev

server.port=8082
server.servlet.context-path=/

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/bookdb?useSSL=false
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

mybatis.type-aliases-package=zbx.model
mybatis.mapper-locations=classpath:mapper/*Mapper.xml

#eureka配置
# 配置eureka的注册中心地址(方便于自己向eureka中去注册)
# 在consumer中有一个restTemplate(模拟http协议)--->http://localhost:8081/all
# 之后就不会再使用真实地址来调用
eureka.client.service-url.defaultZone=http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/,http://eureka7004.com:7004/eureka

# 配置eureka的实例id(和数据库的主键一样，在同一个集群eureka中是绝对不允许重复的)
# 官方文档中是没有要求限制的，怎么写可以
# 但是咱们规定一下，这个值必须要体现provider的功能以及provider的端口号
# 予人玫瑰手有余香
# 张三正在开发book-provider
# 李四正在开发order-provider
# 这么去写其实并不是方便自己，只是让自己队友知道目前自己正在开发什么功能，方便队友操作
eureka.instance.instance-id=book-list-8082

# 虽然已经成功的运行起来了，但是会有一个问题存在Application的值是UNKNOWN
# 以后consumer就不会再通过ip地址来访问provider了，有了eureka之后，会通过eureka的Application的值来进行访问
# 除了负载均衡之外，绝对不能重复
spring.application.name=book-interface

# 配置当鼠标悬浮否一个provider的时候，显示的不是localhost，直接显示ip地址
eureka.instance.prefer-ip-address=true


info.author.name=Bing
info.company.name=AAA Software
info.project.description=Test Book List
# 失效eureka的自我保护机制
# 配置自己向eureka去发送心跳的时间(单位是秒)
eureka.instance.lease-renewal-interval-in-seconds=5
# 配置在eureka最后一次接收到心跳往后数几秒进行剔除
eureka.instance.lease-expiration-duration-in-seconds=8
